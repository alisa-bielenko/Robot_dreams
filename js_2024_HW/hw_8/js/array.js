/*
Теоретичні питання
 1. Опишіть своїми словами як працює метод forEach.
 Метод forEach в JS використовується для ітерації (перебору) кожного елемента у масиві і 
 викликання переданої функції з аргументами, що представляють значення і індекс поточного елемента.
 Основна ідея полягає в тому, що ви передаєте функцію в якості аргументу методу forEach, 
 і ця функція буде викликана для кожного елемента масиву. Метод forEach нічого не повертає, 
 а тільки виконує колбек-функцію один раз для кожного елемента.

 2. Які методи для роботи з масивом мутують існуючий масив, а які повертають новий масив? 
 Наведіть приклади. 
 В JS методи для роботи з масивами можна розділити на дві основні категорії: 
 --- методи, які мутують (змінюють) існуючий масив, 
 --- і методи, які повертають новий масив без зміни вихідного.
 Методи, які мутують (змінюють) існуючий масив: push, pop, shift, unshift, splice.
 Немутуючі методи: slice, concat, filter, find.

 3. Як можна перевірити, що та чи інша змінна є масивом? 
 Вбудована функція Array.isArray() дозволяє перевірити, чи об'єкт є масивом. 
 Вона повертає true, якщо об'єкт є масивом, і false в іншому випадку.
 const myVariable = [1, 2, 3];
 if (Array.isArray(myVariable)) {
   console.log('Це масив!');
 } else {
   console.log('Це не масив.');
 }

 4. В яких випадках краще використовувати метод map(), а в яких forEach()?
 Краще - для отримання нового зміненого масиву
 Метод map() використовують, якщо потрібно перебрати і повернути змінений масив.
 Метод forEach() - якщо треба перебрати масив і нам не треба нічого повертати. Описаний в п.1

 Практичні завдання
 1. Створіть масив з рядків "travel", "hello", "eat", "ski", "lift" та 
 обчисліть кількість рядків з довжиною більше за 3 символи. Вивести це число в консоль.
 
 2. Створіть масив із 4 об'єктів, які містять інформацію про людей: 
 {name: "Іван", age: 25, sex: "чоловіча"}. Наповніть різними даними. 
 Відфільтруйте його, щоб отримати тільки об'єкти зі sex "чоловіча". 
 Відфільтрований масив виведіть в консоль.

 3. Реалізувати функцію фільтру масиву за вказаним типом даних. (Опціональне завдання)

Технічні вимоги:

- Написати функцію filterBy(), яка прийматиме 2 аргументи. Перший аргумент - масив, 
який міститиме будь-які дані, другий аргумент - тип даних.
- Функція повинна повернути новий масив, який міститиме всі дані, які були передані в аргумент, 
за винятком тих, тип яких був переданий другим аргументом. Тобто якщо передати масив 
['hello', 'world', 23, '23', null], і другим аргументом передати 'string', то функція поверне 
масив [23, null].
 */


console.log('_________________task#1_________________')

let myArray = ["travel", "hello", "eat", "ski", "lift"];

let filteredArray = myArray.filter(str => str.length > 3);
//console.log(filteredArray);
console.log(`Кількість рядків з довжиною більше 3 символів: ${filteredArray.length}`);
  

console.log('_________________task#2_________________')

let users = [
    {
        name: "John", 
        age: 25, 
        sex: "male",
        city: "NY",
    },

    {
        name: "Sam", 
        age: 32, 
        sex: "male",
        city: "LA",
    },

    {        
        name: "Helen", 
        age: 37, 
        sex: "female",
        city: "SF",
    },

    {
        name: "Nick", 
        age: 41, 
        sex: "male",
        city: "NY",
    },
];

const usersMen = users.filter((user) => user.sex === 'male');
console.log(usersMen);


console.log('_________________task#3_________________')

const someArray = [
    'hello', 
    'world', 
    23, 
    '23', 
    null,
];

const filterBy = (arr, typeOfElement) => {
    //console.log(arr);
    return arr.filter((element) => typeof element !== typeOfElement);
}

console.log(filterBy(someArray, 'string'));