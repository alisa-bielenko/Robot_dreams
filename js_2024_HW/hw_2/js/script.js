"use strict";
/* Теоретичні питання
 1. Що таке оператори в JavaScript і які їхні типи ви знаєте?
    В JS оператори - це символи чи ключові слова, які використовуються для виконання операцій над 
    змінними та значеннями. JavaScript має різні типи операторів для виконання різних завдань, 
    таких як арифметичні операції, порівняння, логічні операції та інші. Основні типи операторів 
    включають:

    Арифметичні оператори:
    + (додавання)
    - (віднімання)
    * (множення)
    / (ділення)
    % (залишок від ділення)
    ++ (інкремент)
    -- (декремент)

    Оператори порівняння:
    == (рівність з приведенням типів)
    === (строга рівність без приведення типів)
    != (нерівність з приведенням типів)
    !== (строга нерівність без приведення типів)
    > (більше)
    < (менше)
    >= (більше або рівне)
    <= (менше або рівне)

    Логічні оператори:
    && (логічне "І")
    || (логічне "АБО")
    ! (логічне заперечення)

    Оператори присвоєння:
    = (присвоєння)
    +=, -=, *=, /= (скорочені форми арифметичних операцій та присвоєння)

 2. Для чого використовуються оператори порівняння в JavaScript? Наведіть приклади таких операторів.
    Оператори порівняння в JS використовуються для порівняння значень та повернення 
    булевого результату, що вказує на те, чи є вираз істинним чи хибним. 
    Це дозволяє вам виконувати умовні дії та приймати рішення в залежності від результатів порівнянь.

    Основні оператори порівняння включають:

    == (рівність з приведенням типів) - порівнює значення і виконує автоматичне приведення типів, якщо типи різні.
    === (строга рівність без приведення типів) - порівнює значення та типи без автоматичного приведення типів.
    != (нерівність з приведенням типів) - перевіряє, чи не рівні значення з автоматичним приведенням типів.
    !== (строга нерівність без приведення типів) - перевіряє, чи не рівні значення та типи без автоматичного приведення типів.
    > (більше) - перевіряє, чи перше значення більше за друге.
    < (менше) - перевіряє, чи перше значення менше за друге.
    >= (більше або рівне) - перевіряє, чи перше значення більше або рівне другому.
    <= (менше або рівне) - перевіряє, чи перше значення менше або рівне другому.
    Важливо розуміти, як працюють ці оператори, особливо різницю між == та ===. 
    Строга рівність === порівнює не тільки значення, а й типи, що часто є бажаним підходом 
    у великій частині випадків.

    приклади:
    let a = 13;
    let b = "13";

    console.log(a == b); // true (приведення типів)
    console.log(a === b); // false (без приведення типів)
    console.log(a != b); // false (приведення типів)
    console.log(a !== b); // true (без приведення типів)
    console.log(a > b); // false
    console.log(a < b); // false
    console.log(a >= b); // true
    console.log(a <= b); // true

 3. Що таке операції присвоєння в JavaScript? Наведіть кілька прикладів операцій присвоєння.
    Операції присвоєння в JS використовуються для призначення значення змінній. О
    сновна операція присвоєння використовується з символом =. 
    Крім того, є скорочені форми операцій присвоєння для зручності при виконанні операцій 
    над значеннями.
    Основна операція присвоєння використовуються для виконання операцій та присвоєння 
    результату тієї ж самої змінної. 
    Це зручно, коли потрібно виконати арифметичні операції та зберегти результат у тій же змінній.: 
    let x = 10; // присвоєння значення 10 змінній x
    let y = "Hello"; // присвоєння рядка "Hello" змінній y 
    Скорочені форми операцій присвоєння:
    let a = 5;
    a += 3; // тепер a = 8 (еквівалентно a = a + 3)

    let b = 10;
    b -= 4; // тепер b = 6 (еквівалентно b = b - 4)

    let c = 3;
    c *= 2; // тепер c = 6 (еквівалентно c = c * 2)

    let d = 8;
    d /= 4; // тепер d = 2 (еквівалентно d = d / 4)

    У цих прикладах ++ та -- - це оператори інкремента та декремента, які також є скороченими 
    формами операцій присвоєння. Вони використовуються для збільшення або зменшення значення змінної на 1.
    let count = 5;
    count++; // тепер count = 6 (інкремент)
    count--; // тепер count = 5 (декремент)


 Практичні завдання
 1. Створіть змінну "username" і присвойте їй ваше ім'я. Створіть змінну "password" і присвойте їй пароль 
 (наприклад, "secret"). Далі ми імітуємо введеня паролю користувачем. Отримайте від користувача значення його паролю і перевірте, чи співпадає воно зі значенням в змінній "password". 
 Виведіть результат порівнння в консоль.

 2. Створіть змінну x та присвойте їй значення 5. Створіть ще одну змінну y та запишіть присвойте їй значення 3. 
 Виведіть результати додавання, віднімання, множення та ділення 
 змінних x та y у вікні alert.

*/

// #1
console.log('_______task#1_____________');
const userName = 'Alisa'; 
const userPassword = '13';

// Імітація введення користувача (може бути реальним введенням в браузері або іншому середовищі
let userInputPassword = prompt('Enter your password:');

// Перевірка паролю
if (userInputPassword === userPassword) {

    console.log('The password is correct. You have successfully logged in.');
    alert('The password is correct. You have successfully logged in.');

} else {

    console.log('The password is incorrect. Try again.');
    alert('The password is incorrect. Try again.');

}

// #2
console.log('_______task#2_____________');

let x = 5;
let y = 3;

console.log(`Addition: ${x + y}\nSubtraction: ${x - y}\nMultiplication: ${x * y}\nDivision: ${x / y}`);
alert(`Addition: ${x + y}\nSubtraction: ${x - y}\nMultiplication: ${x * y}\nDivision: ${x / y}`);

// # 2 данні з вікон вводу
console.log('_______task#2 with any 2 numbers_____________');

let firstNumber = +prompt('Enter first number');
let secondNumber = +prompt('Enter second number');

let addition = firstNumber + secondNumber;
let subtraction = firstNumber - secondNumber;
let multiplication = firstNumber * secondNumber;
let division = firstNumber / secondNumber;

console.log(`Addition: ${addition}\nSubtraction: ${subtraction}\nMultiplication: ${multiplication}\nDivision: ${division}`);
alert(`Addition: ${addition}\nSubtraction: ${subtraction}\nMultiplication: ${multiplication}\nDivision: ${division}`);