/*
Теоретичні питання
1. Опишіть своїми словами, що таке метод об'єкту
Метод об'єкту в JS - це функція, яка пов'язана з об'єктом і використовується для виконання 
різних операцій або отримання інформації з цього об'єкта. 
Всі об'єкти в JS є екземплярами класів, і методи цих класів дозволяють виконувати 
дії або отримувати дані, пов'язані з об'єктом.
Методи можуть бути вбудованими, тобто визначеними внутрішньою структурою об'єкта, 
або можна визначити свої власні методи для об'єктів за межами об'єкта.

2. Який тип даних може мати значення властивості об'єкта?
Властивості об'єкта в JS можуть мати різні типи даних, і це робить JS мовою з високим рівнем 
динамічної типізації. Ось деякі типи даних, які можуть використовуватися як значення 
властивостей об'єкта:
- число (Number): наприклад - рядок 28
- рядок (String): Наприклад - рядок 29
- масив (Array): Масив може бути значенням властивості. Наприклад рядок 30
- об'єкт (Object): Об'єкт також може бути значенням властивості. Наприклад - рядок 27
- булеве значення (Boolean): Наприклад - рядок 31
- функція (Function): Функція може бути значенням властивості, наприклад - рядок 32
- Null та Undefined: Якщо властивість не має значення, вона може бути null або undefined, рядок 35 - 36

let user = {
    age: 25,
    name: 'John',
    skills: ['JavaScript', 'HTML', 'CSS'],
    address: {
        city: 'Kyiv',
        country: 'Ukraine',
    }
    isStudent: true,
    sayHello: function() {
        console.log('Hello!');
    }
    job: null,
    education: undefined, // хоча в цьому не має сенсу
};

3. Об'єкт це посилальний тип даних. Що означає це поняття?
В JS об'єкти є посилальними типами даних. Це означає, що коли ми створюємо новий об'єкт і присвоюємо 
його змінній, ця змінна насправді містить не сам об'єкт, а посилання (адресу пам'яті) на об'єкт.
При копіюванні або передачі об'єкта в іншу змінну (чи параметр функції) також передається тільки посилання 
на об'єкт, а не сам об'єкт. Таким чином, об'єкти у JS ведуть себе як посилання на дані.

let obj1 = { name: 'John' };
let obj2 = obj1; // obj2 тепер вказує на той же об'єкт, що й obj1

obj1.name = 'Alice';
console.log(obj2.name); // Виведе 'Alice', оскільки obj1 та obj2 посилаються на один і той же об'єкт

У цьому прикладі obj2 не є копією obj1, а лише посиланням на той же об'єкт. Тому зміни, внесені в obj1, впливають і на obj2.

Це важливо враховувати при роботі з об'єктами, оскільки це може впливати на передачу та зміну даних 
в програмі. Якщо потрібно створити копію об'єкта, слід використовувати відповідні методи або 
глибоке копіювання для уникнення непередбачених змін в інших частинах коду.

Практичні завдання
1. Створіть об'єкт product з властивостями name, price та discount. 
Додайте метод для виведення повної ціни товару з урахуванням знижки. 
Викличте цей метод та результат виведіть в консоль.
2. Напишіть функцію, яка приймає об'єкт з властивостями name та age, 
і повертає рядок з привітанням і віком, наприклад "Привіт, мені 30 років". 
Попросіть користувача ввести своє ім'я та вік за допомогою prompt, 
і викличте функцію з введеними даними. 
Результат виклику функції виведіть з допомогою alert.
3.Опціональне. Завдання:
Реалізувати повне клонування об'єкта.
Технічні вимоги:
- Написати функцію для рекурсивного повного клонування об'єкта 
(без єдиної передачі за посиланням, внутрішня вкладеність властивостей об'єкта може бути 
досить великою).
- Функція має успішно копіювати властивості у вигляді об'єктів та масивів на будь-якому 
рівні вкладеності.
- У коді не можна використовувати вбудовані механізми клонування, 
такі як функція Object.assign() або spread.
*/

console.log('_________________task#1_________________')
const product = {
    name: 'Laptop',
    price: 1000, 
    discount: 10, 
    
    calculateTotalPrice: function() {
      const discountedPrice = this.price * (1 - this.discount / 100);
      return discountedPrice;
    }
};
  
console.log(`Total price of the ${product.name} including discount is: ${product.calculateTotalPrice()}`);
  

console.log('_________________task#2_________________')

const createGreeting = (userObject) => {
    console.log(userObject);
    return `Hi, I am ${userObject.name} and I am ${userObject.age} years old!`;
};

const user = {
    name: prompt('Enter your name'),
    age: +prompt('Enter your age'),
};

const greeting = createGreeting(user);
alert(greeting);


console.log('_________________task#3_________________')

let copyObject = (someObj) => {
    let newObj = {};
    for (let key in someObj) {
      if (typeof someObj[key] === "object" && someObj[key] !== null) {
        newObj[key] = {};
        for (let newKey in someObj[key]) {
          newObj[key][newKey] = someObj[key][newKey];
        }
      } else {
        newObj[key] = someObj[key];
      }
    }
    return newObj;
};
  
const originalObject = {
    name: 'John',
    age: 30,
    address: {
        city: 'New York',
        zip: '10001',
    },
    hobbies: {
        reading: true,
        traveling: true,
        cat: {
            catName: 'Ruddy',
            catAge: 3,
        }
    }
};
  
const clonedObject = copyObject(originalObject);
  
console.log(clonedObject);
console.log(clonedObject === originalObject); 